/*global jQuery */

/* TODO:
 *
 * map native console commands to accept multiple arguments
 *
 * weird issue with
 *
 * handle firebug.inspect method
 *
 * better grouping in FbLite
 *
 * support FbLite firebug.d.console.cmd fallbacks
 *
 * string formatting doesn't work
 *
 * support console utility methods (open/close, minimize/maximize, clear, run)
 *
 * reconfigure log() behavior
 *
 * allow runtime changes in settings
 *
 * support groupCollapsed()
 */

(function ($) {
    /****************************************************************************/
    /***  Degrading Script Tags : http://ejohn.org/blog/degrading-script-tags ***/
    /***  This block must never be used in an embedded script                 ***/
    /***  Determine Firebug options from this script tag                      ***/
    var bootstrap = eval("(" + document.getElementsByTagName("script")[document.getElementsByTagName("script").length - 1].innerHTML + ")");
    /****************************************************************************/

    $.firebug = {
        defaults: {
            debug: false,
            methods: ["assert", "log", "debug", "info", "warn", "error", "dir", "dirxml", "count", "trace", "group", "groupEnd", "time", "timeEnd", "profile", "profileEnd"],
      enumerateContents: false
        },


        mountFirebug: function (settings) {

            // foreach Firebug method, create an associated jQuery function
            for (var method in settings.methods) {
                if (settings.methods.hasOwnProperty(method)) {
                    switch (settings.methods[method]) {
                    case "log":
                    case "debug":
                    case "info":
                    case "warn":
                    case "error":
                        $.fn[settings.methods[method]] = function (settings, method) {
                            return function () {
                                // parse out jQuery '.method' commands to call on jQuery object
                                $.each(arguments, function(self, args){
                                    return function(key, value){
                                        var found = false;
                                        if (value && value.match && (found = value.match(/^\.(([a-zA-Z]+[a-zA-Z0-9_\-]*)(?:\(.*\))?)$/))) {
                                            if ($(self)[found[2]]) {
                                                with ($(self)) {
                                                    args[key] = eval(found[1]);
                                                }
                                            }
                                        }
                    else if(value == "this"){
                      args[key] = $(self);
                    }
                                    };
                                }(this, arguments));
                                if (arguments.length) {
                                    window.console[method].apply(window.console, arguments);
                                }

                if (settings.enumerateContents) {
                  // group this jQuery object, calling the method on each item
                  window.console.group(this);
                  this.each(function(i){
                    window.console[method](this);
                  });
                  window.console.groupEnd();
                }
                                return this;
                            };
                        }(settings, settings.methods[method]);
                        break;
                    case "dir":
                    case "dirxml":
                        $.fn[settings.methods[method]] = function (settings, method) {
                            return function () {
                                if (arguments.length) {
                                    window.console[method].apply(window.console, arguments);
                                }

                if (settings.enumerateContents) {
                  // group this jQuery object, calling the method on each item
                  window.console.group(this);
                  this.each(function(i){
                    window.console.group(this);
                    window.console[method](this);
                    window.console.groupEnd();
                  });
                  window.console.groupEnd();
                }
                                return this;
                            };
                        }(settings, settings.methods[method]);
                        break;
                    case "assert":
                        // group the jQuery object and call assert on each item
                        $.fn[settings.methods[method]] = function (settings, method) {
                            return function () {
                if (arguments.length && !arguments[0]) {
                  window.console[method].apply(window.console, arguments);

                  if (settings.enumerateContents) {
                    window.console.group(this);
                    this.each(function(i){
                      window.console.error(this);
                    });
                    window.console.groupEnd();
                  }
                }
                                return this;
                            };
                        }(settings, settings.methods[method]);
                        break;
                    case "time":
                    case "timeEnd":
                    case "group":
                    case "groupEnd":
                        // apply these commands directly (add jQuery object as arg0), return the jQuery object
                        $.fn[settings.methods[method]] = function (settings, method) {
                            return function () {
                                var args = (arguments.length? arguments : [this]);
                                window.console[method].apply(window.console, args);
                                return this;
                            };
                        }(settings, settings.methods[method]);
                        break;
                    case "trace":
                        // apply these commands directly, returning the jQuery object
                        $.fn[settings.methods[method]] = function (settings, method) {
                            return function () {
                                window.console.group("Trace: ", this);
                                window.console[method].apply(window.console, arguments);
                                window.console.groupEnd();
                                return this;
                            };
                        }(settings, settings.methods[method]);
                        break;
                    case "count":
                    case "profile":
                    case "profileEnd":
                        // apply these commands directly, returning the jQuery object
                        $.fn[settings.methods[method]] = function (settings, method) {
                            return function () {
                                window.console[method].apply(window.console, arguments);
                                return this;
                            };
                        }(settings, settings.methods[method]);
                        break;
                    default:
                        break;
                    }
                }
            }
        },

    };

  var settings = $.extend(true, {}, $.firebug.defaults, bootstrap);

  $.firebug.mountFirebug(settings);
})(jQuery);
